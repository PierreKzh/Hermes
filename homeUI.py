# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Pierre\Desktop\HermesPY\addContact.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtCore import QRunnable, Qt, QThreadPool
from PyQt5.QtWidgets import QAction, QApplication, QListWidgetItem
from PyQt5 import QtWidgets, QtCore, QtGui, QtTest
from PyQt5.QtWidgets import *
from threading import Thread
from datetime import datetime as dt
import tools
import time
import cgitb
import base64


class Ui_home(object):

    def setupUi(self, homeWindow, idUser):
        print("========================START HOME========================")
        homeWindow.setObjectName("MainWindow")
        homeWindow.resize(1273, 793)
        self.lastUser = None
        self.centralwidget = QtWidgets.QWidget(homeWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(52, 52, 52);")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.top_bar = QtWidgets.QFrame(self.centralwidget)
        self.top_bar.setMaximumSize(QtCore.QSize(16777215, 80))
        self.top_bar.setStyleSheet("background-color: rgb(43, 43, 43);")
        self.top_bar.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.top_bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar.setObjectName("top_bar")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.top_bar)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_user = QtWidgets.QFrame(self.top_bar)
        self.frame_user.setMaximumSize(QtCore.QSize(220, 80))
        self.frame_user.setStyleSheet("background-color: rgb(34, 34, 34);")
        self.frame_user.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_user.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_user.setObjectName("frame_user")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_user)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pushButton_Profil = QtWidgets.QPushButton(self.frame_user)
        self.pushButton_Profil.setStyleSheet("background-color: #404EED;")
        self.pushButton_Profil.setObjectName("pushButton_Profil")
        self.horizontalLayout_4.addWidget(self.pushButton_Profil)
        self.horizontalLayout.addWidget(self.frame_user)
        self.frame_topbar = QtWidgets.QFrame(self.top_bar)
        self.frame_topbar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_topbar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_topbar.setObjectName("frame_topbar")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_topbar)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_Title = QtWidgets.QLabel(self.frame_topbar)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_Title.setFont(font)
        self.label_Title.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_Title.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Title.setObjectName("label_Title")
        self.verticalLayout_5.addWidget(self.label_Title)
        self.horizontalLayout.addWidget(self.frame_topbar)
        self.verticalLayout.addWidget(self.top_bar)
        self.Content = QtWidgets.QFrame(self.centralwidget)
        self.Content.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Content.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Content.setObjectName("Content")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.Content)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_sidebar = QtWidgets.QFrame(self.Content)
        self.frame_sidebar.setMaximumSize(QtCore.QSize(220, 16777215))
        self.frame_sidebar.setStyleSheet("background-color: rgb(43, 43, 43);")
        self.frame_sidebar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_sidebar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_sidebar.setObjectName("frame_sidebar")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_sidebar)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_sidebar_top = QtWidgets.QFrame(self.frame_sidebar)
        self.frame_sidebar_top.setMaximumSize(QtCore.QSize(16777215, 60))
        self.frame_sidebar_top.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_sidebar_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_sidebar_top.setObjectName("frame_sidebar_top")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_sidebar_top)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton_ListContact = QtWidgets.QPushButton(self.frame_sidebar_top)
        self.pushButton_ListContact.setStyleSheet("background-color: #404EED;")
        self.pushButton_ListContact.setObjectName("pushButton_ListContact")
        self.horizontalLayout_3.addWidget(self.pushButton_ListContact)
        self.pushButton_AddContact = QtWidgets.QPushButton(self.frame_sidebar_top)
        self.pushButton_AddContact.setStyleSheet("background-color: #404EED;")
        self.pushButton_AddContact.setObjectName("pushButton_AddContact")
        self.horizontalLayout_3.addWidget(self.pushButton_AddContact)
        self.verticalLayout_2.addWidget(self.frame_sidebar_top)
        self.frame_sidebar_center = QtWidgets.QFrame(self.frame_sidebar)
        self.frame_sidebar_center.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_sidebar_center.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_sidebar_center.setObjectName("frame_sidebar_center")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_sidebar_center)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_sidebar_center)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page_ListContact = QtWidgets.QWidget()
        self.page_ListContact.setObjectName("page_ListContact")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.page_ListContact)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.lineEdit_Research = QtWidgets.QLineEdit(self.page_ListContact)
        self.lineEdit_Research.setStyleSheet("background-color: rgb(153, 155, 255);\n"
                                             "color: rgb(255, 255, 255);")
        self.lineEdit_Research.setObjectName("lineEdit_Research")
        self.verticalLayout_6.addWidget(self.lineEdit_Research)
        self.listWidget_contacts = QtWidgets.QListWidget(self.page_ListContact)
        self.listWidget_contacts.setStyleSheet("background-color: rgb(88, 88, 88);")
        self.listWidget_contacts.setObjectName("listWidget_contacts")
        self.verticalLayout_6.addWidget(self.listWidget_contacts)
        self.stackedWidget.addWidget(self.page_ListContact)
        self.page_AddContact = QtWidgets.QWidget()
        self.page_AddContact.setObjectName("page_AddContact")
        self.formLayout = QtWidgets.QFormLayout(self.page_AddContact)
        self.formLayout.setObjectName("formLayout")
        self.label_Username = QtWidgets.QLabel(self.page_AddContact)
        self.label_Username.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_Username.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_Username.setObjectName("label_Username")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_Username)
        self.lineEdit_Username = QtWidgets.QLineEdit(self.page_AddContact)
        self.lineEdit_Username.setStyleSheet("color: rgb(255, 255, 255);")
        self.lineEdit_Username.setObjectName("lineEdit_Username")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_Username)
        self.label_IdContact = QtWidgets.QLabel(self.page_AddContact)
        self.label_IdContact.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_IdContact.setObjectName("label_IdContact")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_IdContact)
        self.lineEdit_IdContact = QtWidgets.QLineEdit(self.page_AddContact)
        self.lineEdit_IdContact.setStyleSheet("color: rgb(255, 255, 255);")
        self.lineEdit_IdContact.setObjectName("lineEdit_IdContact")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_IdContact)
        self.label_AddContactEvent = QtWidgets.QLabel(self.page_AddContact)
        self.label_AddContactEvent.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_AddContactEvent.setText("")
        self.label_AddContactEvent.setObjectName("label_AddContactEvent")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.SpanningRole, self.label_AddContactEvent)
        self.pushButton_Add = QtWidgets.QPushButton(self.page_AddContact)
        self.pushButton_Add.setStyleSheet("background-color: #404EED;")
        self.pushButton_Add.setObjectName("pushButton_Add")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.SpanningRole, self.pushButton_Add)
        self.stackedWidget.addWidget(self.page_AddContact)
        self.verticalLayout_4.addWidget(self.stackedWidget)
        self.verticalLayout_2.addWidget(self.frame_sidebar_center)
        self.frame_sidebar_bottom = QtWidgets.QFrame(self.frame_sidebar)
        self.frame_sidebar_bottom.setMaximumSize(QtCore.QSize(16777215, 50))
        self.frame_sidebar_bottom.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_sidebar_bottom.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_sidebar_bottom.setObjectName("frame_sidebar_bottom")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_sidebar_bottom)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton_Parameter = QtWidgets.QPushButton(self.frame_sidebar_bottom)
        self.pushButton_Parameter.setStyleSheet("background-color: #404EED;")
        self.pushButton_Parameter.setObjectName("pushButton_Parameter")
        self.horizontalLayout_5.addWidget(self.pushButton_Parameter)
        self.verticalLayout_2.addWidget(self.frame_sidebar_bottom)
        self.horizontalLayout_2.addWidget(self.frame_sidebar)
        self.frame_leftcontent = QtWidgets.QFrame(self.Content)
        self.frame_leftcontent.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_leftcontent.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_leftcontent.setObjectName("frame_leftcontent")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_leftcontent)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.stackedWidget_2 = QtWidgets.QStackedWidget(self.frame_leftcontent)
        self.stackedWidget_2.setObjectName("stackedWidget_2")
        self.page_message = QtWidgets.QWidget()
        self.page_message.setObjectName("page_message")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.page_message)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.frame_leftcontent_top = QtWidgets.QFrame(self.page_message)
        self.frame_leftcontent_top.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_leftcontent_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_leftcontent_top.setObjectName("frame_leftcontent_top")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_leftcontent_top)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.scrollArea = QtWidgets.QScrollArea(self.frame_leftcontent_top)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        self.scrollArea.setFont(font)
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1013, 662))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scroll_box = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.scroll_box.addStretch(1)
        self.horizontalLayout_7.addWidget(self.scrollArea)
        self.verticalLayout_7.addWidget(self.frame_leftcontent_top)
        self.frame_leftcontent_bottom = QtWidgets.QFrame(self.page_message)
        self.frame_leftcontent_bottom.setMaximumSize(QtCore.QSize(16777215, 50))
        self.frame_leftcontent_bottom.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_leftcontent_bottom.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_leftcontent_bottom.setObjectName("frame_leftcontent_bottom")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_leftcontent_bottom)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(10)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.lineEdit_Message_2 = QtWidgets.QLineEdit(self.frame_leftcontent_bottom)
        self.lineEdit_Message_2.setMinimumSize(QtCore.QSize(0, 40))
        self.lineEdit_Message_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Message_2.setFont(font)
        self.lineEdit_Message_2.setStyleSheet("QLineEdit {\n"
                                              "    border: 2px solid rgb(52, 52, 52);\n"
                                              "    border-radius: 20px;\n"
                                              "    color: #FFF;\n"
                                              "    padding-left: 20px;\n"
                                              "    padding right: 20px;\n"
                                              "    background-color: rgb(60, 60, 60);\n"
                                              "}\n"
                                              "\n"
                                              "QLineEdit:hover {\n"
                                              "    border: 2px solid rgb(58, 66, 72);\n"
                                              "}\n"
                                              "\n"
                                              "QLineEdit:focus {\n"
                                              "    border: 2px solid #625C6A;\n"
                                              "    background-color: rgb(80, 80, 80);\n"
                                              "}")
        self.lineEdit_Message_2.setObjectName("lineEdit_Message_2")
        self.horizontalLayout_8.addWidget(self.lineEdit_Message_2)
        self.pushButton_Send_2 = QtWidgets.QPushButton(self.frame_leftcontent_bottom)
        self.pushButton_Send_2.setMinimumSize(QtCore.QSize(120, 40))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Send_2.setFont(font)
        self.pushButton_Send_2.setStyleSheet("QPushButton\n"
                                             "{\n"
                                             "    border: 2px solid rgb(52, 52, 52);\n"
                                             "    border-radius: 20px;\n"
                                             "    color: #EEE;\n"
                                             "    background-color: rgb(60, 60, 60);\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:hover\n"
                                             "{\n"
                                             "    background-color:#50555C;\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton::pressed\n"
                                             "{\n"
                                             "    background-color:#625C6A;\n"
                                             "}")
        self.pushButton_Send_2.setObjectName("pushButton_Send_2")
        self.horizontalLayout_8.addWidget(self.pushButton_Send_2)
        self.verticalLayout_7.addWidget(self.frame_leftcontent_bottom)
        self.stackedWidget_2.addWidget(self.page_message)
        self.page_Profil = QtWidgets.QWidget()
        self.page_Profil.setObjectName("page_Profil")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.page_Profil)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.pushButton_pagemessage1 = QtWidgets.QPushButton(self.page_Profil)
        self.pushButton_pagemessage1.setObjectName("pushButton_pagemessage1")
        self.horizontalLayout_9.addWidget(self.pushButton_pagemessage1)
        self.label_Profil = QtWidgets.QLabel(self.page_Profil)
        self.label_Profil.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_Profil.setLineWidth(1)
        self.label_Profil.setObjectName("label_Profil")
        self.horizontalLayout_9.addWidget(self.label_Profil)
        self.stackedWidget_2.addWidget(self.page_Profil)
        self.page_Parameter = QtWidgets.QWidget()
        self.page_Parameter.setObjectName("page_Parameter")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.page_Parameter)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.pushButton_pagemessage1_2 = QtWidgets.QPushButton(self.page_Parameter)
        self.pushButton_pagemessage1_2.setObjectName("pushButton_pagemessage1_2")
        self.horizontalLayout_10.addWidget(self.pushButton_pagemessage1_2)
        self.label_Parameter = QtWidgets.QLabel(self.page_Parameter)
        self.label_Parameter.setObjectName("label_Parameter")
        self.horizontalLayout_10.addWidget(self.label_Parameter)
        self.stackedWidget_2.addWidget(self.page_Parameter)
        self.verticalLayout_3.addWidget(self.stackedWidget_2)
        self.horizontalLayout_2.addWidget(self.frame_leftcontent)
        self.verticalLayout.addWidget(self.Content)
        homeWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(homeWindow)
        self.stackedWidget.setCurrentIndex(1)
        self.stackedWidget_2.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(homeWindow)

        # add action for list of members
        self.listWidget_contacts.setContextMenuPolicy(Qt.ActionsContextMenu)
        self.actionDelete = QAction("Delete", self.listWidget_contacts)
        self.listWidget_contacts.addAction(self.actionDelete)
        self.listWidget_contacts.clicked.connect(lambda _, s=self: setCurrentContact(s))
        # add function for an action in list members
        self.actionDelete.triggered.connect(lambda _, s=self: deleteContact(s))
        # display members list in the widget list contact
        self.idUser = idUser
        displayListWidget_contacts(self)
        self.pushButton_ListContact.clicked.connect(lambda _, s=self: displayListWidget_contacts(s))
        # add contact pushing the button
        self.pushButton_Add.clicked.connect(lambda _, s=self: addContact(s))
        
        # clear message show
        self.listWidget_contacts.clicked.connect(lambda _, s=self: showMessage.clearShowMessage(s))
        # data need for show message
        self.threadCount = 0
        self.nbMessages = None
        self.previous_nbMessages = 0
        self.listWidget_contacts.clicked.connect(lambda _, s=self: showMessage.dataShowMessage(s))
        # show message from database
        self.listWidget_contacts.clicked.connect(lambda _, s=self: showMessage.showMessageDatabase(s))
        # show send message
        self.pushButton_Send_2.clicked.connect(lambda _, s=self: showMessage.ShowSendMessage(s))
        # send message
        self.pushButton_Send_2.clicked.connect(lambda _, s=self: showMessage.sendMessage(s))
        
        # switch page
        self.pushButton_AddContact.clicked.connect(
            lambda: self.stackedWidget.setCurrentWidget(self.page_AddContact))
        self.pushButton_ListContact.clicked.connect(
            lambda: self.stackedWidget.setCurrentWidget(self.page_ListContact))
        self.pushButton_Profil.clicked.connect(
            lambda: self.stackedWidget_2.setCurrentWidget(self.page_Profil))
        self.pushButton_Parameter.clicked.connect(
            lambda: self.stackedWidget_2.setCurrentWidget(self.page_Parameter))
        self.pushButton_pagemessage1_2.clicked.connect(
            lambda: self.stackedWidget_2.setCurrentWidget(self.page_message))
        self.pushButton_pagemessage1.clicked.connect(
            lambda: self.stackedWidget_2.setCurrentWidget(self.page_message))

        # button for copy user id
        self.buttonCopyId = QtWidgets.QPushButton("copy ID", self.page_Profil)
        self.horizontalLayout_9.addWidget(self.buttonCopyId)
        self.buttonCopyId.clicked.connect(lambda _, s=self: copyIdToClipboard(s))
        self.buttonCopyId.setStyleSheet("background-color: #404EED") 

        # create thread
        self.thread = QtCore.QThread()
        # create object which will be moved to another thread
        self.browserHandler = BrowserHandler()
        # move object to another thread
        self.browserHandler.moveToThread(self.thread)
        # after that, we can connect signals from this object to slot in GUI thread
        self.browserHandler.newMessage.connect(self.showNewMessage)
        # connect started signal to run method of object in another thread
        self.thread.started.connect(self.browserHandler.run)
        # start thread
        self.thread.start()

        #processing(self)
        cgitb.enable(format = 'text')

    def showNewMessage(self):
        print("==========SHOW USER (message)============")
        # bdd connexion
        i = 0
        conn = tools.sqlite3.connect('dataFile.db')
        cursor = conn.cursor()
        crypt = tools.crypto()
        print("A")
        # Verifie qu'il y a des msg sur l'utilisateur
        if self.nbMessages != None:
            print("AA")
            # Si nouveau message dans la bdd alors...
            if int(self.nbMessages) > int(self.previous_nbMessages):
                print("AAA")
                cursor.execute(f"SELECT * FROM messages WHERE conversation_id='{self.actifIdConversation}' ORDER BY message_id DESC")
                rows = cursor.fetchall()
                # recupere les données des nouveaux msg
                for row in rows:
                    db_senderDirection = row[2]
                    db_senderUsername = row[3]
                    db_date = row[4]
                    db_message = row[5]
                    decryptedMessage_senderDirection = crypt.decrypted(tools.sharedPassword, db_senderDirection)
                    decryptedMessage_senderUsername = crypt.decrypted(tools.sharedPassword, db_senderUsername)
                    decryptedMessage_date = crypt.decrypted(tools.sharedPassword, db_date)
                    decryptedMessage_message = crypt.decrypted(tools.sharedPassword, db_message)

                    print(decryptedMessage_senderDirection)
                    print(decryptedMessage_senderUsername)
                    print(decryptedMessage_date)
                    print(decryptedMessage_message)

                    # Seulement les messages recu qu'on affiche
                    if decryptedMessage_senderDirection != "send":
                        # Fonction  affiche les nouveau messages
                        showMessage.funShowUser(self, decryptedMessage_senderUsername, decryptedMessage_senderDirection)
                        showMessage.funShowMessage(self, decryptedMessage_message, decryptedMessage_date, decryptedMessage_senderDirection)

                    # Permet de quitter apres avoir afficher les nouveaux msg
                    i = i + 1
                    if i == (int(self.nbMessages) - int(self.previous_nbMessages)):
                        break
                
                self.previous_nbMessages = self.nbMessages
                i = 0
                    

            try:
                cursor.execute(f"SELECT * FROM messages WHERE conversation_id='{self.actifIdConversation}'")
                self.nbMessages = len(cursor.fetchall())
            except:
                self.nbMessages = None


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_Profil.setText(_translate("MainWindow", "Profil"))
        self.label_Title.setText(_translate("MainWindow", "Title"))
        self.pushButton_ListContact.setText(_translate("MainWindow", "List Contact"))
        self.pushButton_AddContact.setText(_translate("MainWindow", "Add contact"))
        self.lineEdit_Research.setPlaceholderText(_translate("MainWindow", "Research"))
        self.label_Username.setText(_translate("MainWindow", "Username :"))
        self.label_IdContact.setText(_translate("MainWindow", "Id : "))
        self.pushButton_Add.setText(_translate("MainWindow", "Add"))
        self.pushButton_Parameter.setText(_translate("MainWindow", "Parameter"))
        self.lineEdit_Message_2.setPlaceholderText(_translate("MainWindow", "Send message..."))
        self.pushButton_Send_2.setText(_translate("MainWindow", "SEND"))
        self.pushButton_pagemessage1.setText(_translate("MainWindow", "Back"))
        self.label_Profil.setText(_translate("MainWindow", "Profil"))
        self.pushButton_pagemessage1_2.setText(_translate("MainWindow", "Back"))
        self.label_Parameter.setText(_translate("MainWindow", "Parameter"))

# Object, which will be moved to another thread
class BrowserHandler(QtCore.QObject):
    running = False
    newMessage = QtCore.pyqtSignal()
    
    # method which will execute algorithm in another thread
    def run(self):
        while True:
            # send signal with new text and color from aonther thread
            self.newMessage.emit()
            QtCore.QThread.msleep(5000)


def setCurrentContact(self):
    """
    It sets the current contact to the contact that is selected in the listWidget_contacts.
    """
    print("===========SetCurrentContact BEGINING=============")
    try:
        currentContact = self.listWidget_contacts.currentItem().text()
        if(currentContact[:9] != "[WAITING]"):
            self.currentContact = self.listWidget_contacts.currentItem().text()
            self.label_Title.setText(self.currentContact)
            print(f"===========SetCurrentContact : {self.currentContact}=============")
        print("========END SET CURRENT CONTACT===========")
    except:
        print("=========ERROR WHEN SET CURRENT CONTACT===========")

def addContact(self):
    print("===========add contact=============")
    try:
        # Connection to the database
        conn = tools.sqlite3.connect('dataFile.db')
        cursor = conn.cursor()
        crypt = tools.crypto()

        #get informations
        username = self.lineEdit_Username.text()
        id = self.lineEdit_IdContact.text()

        #disass id
        decodedId = base64.b64decode(id)
        idContact = decodedId.decode('utf-8')
        contactTorAddress = idContact[:62]
        contactPublicKey = idContact[62:]

        # Error : No passwd or username
        if not username or not id:
            self.label_AddContactEvent.setStyleSheet("color:#FC6151;")
            self.label_AddContactEvent.setText("Fill in the form")
            print("===========add failed : username or Id forgot===========")
            return

        # Error : id not correspond
        if not (tools.re.search("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$", id) and len(id) == 684):
            self.label_AddContactEvent.setStyleSheet("color:#FC6151;")
            self.label_AddContactEvent.setText("Bad id")
            print("===========add failed : bad id entered===========")
            return

        # check if already have the contact
        cursor.execute(f'SELECT contact_publicKey FROM contacts')
        rows = cursor.fetchall()
        for row in rows:
            db_publicKey = row[0]
            decrypt_publicKey = crypt.decrypted(tools.sharedPassword, db_publicKey)
            if contactPublicKey == decrypt_publicKey:
                self.label_AddContactEvent.setStyleSheet("color:#FC6151;")
                self.label_AddContactEvent.setText("Existing contact")
                print("===========add failed : contact existing===========")
                return

        #encrypt datas
        encrypt_contactUsername = crypt.encrypted(tools.sharedPassword, username)
        encrypt_contactOnion = crypt.encrypted(tools.sharedPassword, contactTorAddress)
        encrypt_contactPubKey = crypt.encrypted(tools.sharedPassword, contactPublicKey)
        encrypt_idUser = crypt.encrypted(tools.sharedPassword, str(tools.userId))
        encrypted_wainting = crypt.encrypted(tools.sharedPassword, "1")

        # add contact
        cursor.execute(f"INSERT INTO contacts (user_id, contact_username, contact_onion, contact_publicKey, waiting) VALUES ('{encrypt_idUser}', '{encrypt_contactUsername}', '{encrypt_contactOnion}', '{encrypt_contactPubKey}', '{encrypted_wainting}')")
        conn.commit()

        cursor.execute(f"SELECT contact_id FROM contacts WHERE user_id='{encrypt_idUser}' AND contact_username='{encrypt_contactUsername}'")
        rows = cursor.fetchall()
        for row in rows:
            db_idContact = row[0]
            encrypt_idContact = crypt.encrypted(tools.sharedPassword, str(db_idContact))

        # add conversation
        cursor.execute(f"INSERT INTO conversations (user_id, contact_id) VALUES ('{encrypt_idUser}', '{encrypt_idContact}')")
        conn.commit()

        # contact sucesfully added
        self.label_AddContactEvent.setText("The contact has been added")
        self.label_AddContactEvent.setStyleSheet("color:#27AE4E;")
        self.lineEdit_Username.setText("")
        self.lineEdit_IdContact.setText("")

        displayListWidget_contacts(self) # displaying contacts

        sendVerifContact(contactTorAddress, contactPublicKey) # send a verif contact message

        print(f"==========contact add - {username}:{idContact}====================")
    except:
        print("========ERROR ADD CONTACT========")

def deleteContact(self):
    print("===========delete contact=============")
    try:
        if (self.listWidget_contacts.currentItem().text()[:9] == "[WAITING]"):
            currentContact = self.listWidget_contacts.currentItem().text()[10:]
        else:
            currentContact = self.listWidget_contacts.currentItem().text()

        # Connection to the database
        conn = tools.sqlite3.connect('dataFile.db')
        cursor = conn.cursor()
        crypt = tools.crypto()

        # get contact username
        cursor.execute(f'SELECT contact_username FROM contacts')
        rows = cursor.fetchall()
        for row in rows:
            db_username = row[0]
            decrypt_username = crypt.decrypted(tools.sharedPassword, db_username)
            # delete contact
            if currentContact == decrypt_username:
                cursor.execute(f"DELETE FROM contacts WHERE contact_username = '{db_username}'")
                print(f"===========delete contact : {decrypt_username}=============")
                break
        conn.commit()

        displayListWidget_contacts(self) # displaying contacts
    except:
        print("=======ERROR DELETE CONTACT===========")

def displayListWidget_contacts(self):
    """
    It gets the contacts from the database and displays them in a list widget.
    """
    print("===========displayListWidget_contacts=============")
    try:
        self.listWidget_contacts.clear()

        # bdd connexion
        conn = tools.sqlite3.connect('dataFile.db')
        cursor = conn.cursor()
        crypt = tools.crypto()

        # get contact username
        cursor.execute('SELECT user_id, contact_username, waiting FROM contacts')
        rows = cursor.fetchall()
        for row in rows:
            db_userId = row[0]
            decrypt_userId = crypt.decrypted(tools.sharedPassword, db_userId)
            db_username = row[1]
            decrypt_username = crypt.decrypted(tools.sharedPassword, db_username)
            db_waiting = row[2]
            decrypt_waiting = crypt.decrypted(tools.sharedPassword, db_waiting)
            # display contact
            if (decrypt_userId == str(tools.userId)):
                lstItem = QListWidgetItem(decrypt_username) # add the contact username to the item list
                if int(decrypt_waiting) == 1:
                    lstItem.setText("[WAITING] "+decrypt_username)
                    lstItem.setBackground(QtGui.QColor("grey"))
                self.listWidget_contacts.addItem(lstItem)

        print("===========displayListWidget_contacts END=============")
    except:
        print("===========ERROR DISPLAY LIST CONTACT==========")

def copyIdToClipboard(self):
    cb = QApplication.clipboard()
    cb.clear(mode=cb.Clipboard)  # clear the clipboard
    id = f"{tools.sharedOnionAddress}{tools.sharedPublicKey}"  # id in clear text
    encodedId = base64.b64encode(id.encode('utf-8'))  # id encode to base64
    cb.setText(str(encodedId, "utf-8"), mode=cb.Clipboard)  # set id to the cliboard
    self.buttonCopyId.setText('copied !')
    QtTest.QTest.qWait(750)
    self.buttonCopyId.setText('copy ID')

def sendVerifContact(torAddress, publicKey):
    print("============SEND VERIF CONTACT===========")
    try:
        # encrypt message
        jsonMessage = '{"sendCode":200, "publicKeyHash":"' + tools.crypto().toSHA(tools.sharedPublicKey) + '"}'
        import_pubKey = tools.RSA.importKey(bytes(publicKey, 'utf-8'))
        jsonMessageEncrypt = tools.crypto().encrypt_RSA(import_pubKey, bytes(jsonMessage, 'utf-8'))

        # send message
        tools.communication.send(torAddress, jsonMessageEncrypt)
        print("=======END SEND VERIF CONTACT===========")
    except:
        print("==========ERROR SEND VERIF CONTACT============")

class showMessage(object):
    def dataShowMessage(self):
        print("==========DATA FOR SHOW MESSAGE============")
        # bdd connexion
        conn = tools.sqlite3.connect('dataFile.db')
        cursor = conn.cursor()
        crypt = tools.crypto()

        currentContact = self.listWidget_contacts.currentItem().text()
        
        # Recovering id Contact selected
        cursor.execute("SELECT * FROM contacts")
        rowsContact = cursor.fetchall()
        for rowContact in rowsContact:
            dbContact_idUser = rowContact[1]
            dbContact_contactUsername = rowContact[2]
            decryptedContact_idUser = crypt.decrypted(tools.sharedPassword, dbContact_idUser)
            decryptedContact_contactUsername = crypt.decrypted(tools.sharedPassword, dbContact_contactUsername)
            
            if decryptedContact_idUser == str(self.idUser) and decryptedContact_contactUsername == currentContact:
                self.id_contactThread = rowContact[0]

                # Recovering the conversation id with the contact
                cursor.execute("SELECT * FROM conversations")
                rowsConversation = cursor.fetchall()
                for rowConversation in rowsConversation:
                    dbConversation_idUser = rowConversation[1]
                    dbConversation_idContact = rowConversation[2]
                    decryptedConversation_idUser = crypt.decrypted(tools.sharedPassword, dbConversation_idUser)
                    decryptedConversation_idContact = crypt.decrypted(tools.sharedPassword, dbConversation_idContact)
                    if decryptedConversation_idUser == str(self.idUser) and decryptedConversation_idContact == str(self.id_contactThread):
                        dbConversation_idConversation = rowConversation[0]

                        # Recovering the number of messages on the conversation
                        try:
                            cursor.execute("SELECT * FROM messages")
                            rowsConversation = cursor.fetchall()
                            for rowConversation in rowsConversation:
                                dbMessage_idConversation = str(rowConversation[1])
                                decryptedMessage_idConversation = crypt.decrypted(tools.sharedPassword, dbMessage_idConversation)

                                if str(dbConversation_idConversation) == decryptedMessage_idConversation:
                                    cursor.execute(f"SELECT * FROM messages WHERE conversation_id = '{dbMessage_idConversation}'")
                                    self.actifIdConversation = dbMessage_idConversation
                                    self.nbMessages = len(cursor.fetchall())
                                    self.previous_nbMessages = self.nbMessages
                                    print(self.nbMessages)
                                    break
                        except:
                            print("Plus de message")
                        

                        

    def sendMessage(self):
        ##########################################################################
        # A METTRE DANS UN THREAD SINON APPLI BLOQUE LE TEMPS DENVOIS DU MESSAGE #
        ##########################################################################
        try:
            message = self.lineEdit_Message_2.text()
            self.lineEdit_Message_2.setText("")
            if message:
                print("=============SEND MESSAGE=========================")
                addressOnion = ''
                publicKey = ''

                # Connection to the database
                conn = tools.sqlite3.connect('dataFile.db')
                cursor = conn.cursor()
                crypt = tools.crypto()

                # get contact
                cursor.execute('SELECT contact_username, contact_onion, contact_publicKey FROM contacts')
                rows = cursor.fetchall()
                for row in rows:
                    db_username = row[0]
                    decrypt_username = crypt.decrypted(tools.sharedPassword, db_username)
                    db_address = row[1]
                    decrypt_address = crypt.decrypted(tools.sharedPassword, db_address)
                    db_publicKey = row[2]
                    decrypt_publicKey = crypt.decrypted(tools.sharedPassword, db_publicKey)
                    # get onion address
                    if self.currentContact == decrypt_username:
                        addressOnion = decrypt_address
                        publicKey = decrypt_publicKey.replace(r'\n', '\n')
                        break
                conn.commit()
                #encrypt message
                jsonMessage = '{"sendCode":100, "value":"'+message+'", "torAddress":"'+tools.sharedOnionAddress+'"}'
                import_pubKey = tools.RSA.importKey(bytes(publicKey, 'utf-8'))
                jsonMessageEncrypt = tools.crypto().encrypt_RSA(import_pubKey, bytes(jsonMessage, 'utf-8'))
                #send message
                tools.communication.send(addressOnion, jsonMessageEncrypt)

                #reply = s.recv(4096)
                tools.communication.sendMessage(message, addressOnion, self.idUser)
                

        except:
            print("=============ERROR WHEN SENDING MESSAGE===============")

    def funShowMessage(self, message, date, sender):
        print("==========SHOW MESSAGE (message)============")
        # Message Send
        self.message = QtWidgets.QLabel()
        self.message.setText(message)
        self.message.setContentsMargins(10, 5, 10, 5)

        # Send
        if sender == "send":
            self.message.setAlignment(QtCore.Qt.AlignRight)
            self.message.setStyleSheet(
                "color:rgb(52, 52, 52);\n"
                "font: 12pt \"Bebas Neue\";\n"
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0,"
                "stop:0 #c27ab4, stop:1 #6e9fdc);\n"
                "border-radius: 10px;"
            )

        # Receive
        else:
            self.message.setStyleSheet(
                "color:rgb(52, 52, 52);\n"
                "font: 12pt \"Bebas Neue\";\n"
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0,"
                "stop:0 #e0c3fc, stop:1 #8ec5fc);\n"
                "border-radius: 10px;\n"
            )

        # Affiche date avec ToolTip
        self.message.setToolTip(date)

        self.message.setWordWrap(True)

        # Position du message (droite)
        hbox = QHBoxLayout()
        hbox.addWidget(self.message)

        # Ajout du message
        self.scroll_box.addLayout(hbox)

        # Retour en bas de message
        try:
            self.scrollArea.verticalScrollBar().rangeChanged.connect(
                self.scrollToBottom, QtCore.Qt.UniqueConnection)
        except:
            pass

    def funShowUser(self, username, sender):
        print("==========SHOW USER (message)============")
        # Message Send
        self.username = QtWidgets.QLabel()
        self.username.setText(username)
        self.username.setStyleSheet(
            "color:#EEEEEE;\n"
            "font: 8pt \"Bebas Neue\";\n"
            "font-weight:bold;"
        )

        # Position du message (droite)
        hbox = QHBoxLayout()
        if sender == "send":
            hbox.addStretch(1)
        hbox.addWidget(self.username)

        # Ajout du message
        self.scroll_box.addLayout(hbox)

    def clearShowMessage(self):
        print("==========CLEAR DATABASE============")
        for i in reversed(range(self.scroll_box.count() - 1)):
            layout_item = self.scroll_box.itemAt(i + 1)
            layout_layout = layout_item.layout()
            if layout_layout is not None:
                while layout_layout.count():
                    item = layout_layout.takeAt(0)
                    widget = item.widget()
                    if widget is not None:
                        widget.setParent(None)

            self.scroll_box.removeItem(layout_item)

    def showMessageDatabase(self):
        print("==========SHOW MESSAGE FROM DATABASE============")
        # bdd connexion
        conn = tools.sqlite3.connect('dataFile.db')
        cursor = conn.cursor()
        crypt = tools.crypto()

        #try:
        cursor.execute(f"SELECT * FROM messages WHERE conversation_id='{self.actifIdConversation}' ORDER BY message_id ASC")
        rows = cursor.fetchall()
        for row in rows:
            db_senderDirection = row[2]
            db_senderUsername = row[3]
            db_date = row[4]
            db_message = row[5]
            decryptedMessage_senderDirection = crypt.decrypted(tools.sharedPassword, db_senderDirection)
            decryptedMessage_senderUsername = crypt.decrypted(tools.sharedPassword, db_senderUsername)
            decryptedMessage_date = crypt.decrypted(tools.sharedPassword, db_date)
            decryptedMessage_message = crypt.decrypted(tools.sharedPassword, db_message)

            showMessage.funShowUser(self, decryptedMessage_senderUsername, decryptedMessage_senderDirection)
            showMessage.funShowMessage(self, decryptedMessage_message, decryptedMessage_date, decryptedMessage_senderDirection)

        #except:
            #print("Pas de messages")

    def ShowSendMessage(self):
        conn = tools.sqlite3.connect('dataFile.db')
        cursor = conn.cursor()
        crypt = tools.crypto()

        message = self.lineEdit_Message_2.text()

        now = dt.now()
        date = now.strftime("%d/%m/%Y %H:%M:%S")

        cursor.execute(f"SELECT * FROM users WHERE user_id='{self.idUser}'")
        rows = cursor.fetchall()
        for row in rows:
            userUsername = crypt.decrypted(tools.sharedPassword, row[1])

        if message != "":
            showMessage.funShowUser(self, userUsername, "send")
            showMessage.funShowMessage(self, message, date, "send")




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    homeWindow = QtWidgets.QMainWindow()
    ui = Ui_home()
    ui.setupUi(homeWindow)
    homeWindow.show()
    sys.exit(app.exec_())